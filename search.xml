<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>BUAA_CO_2022 P5</title>
      <link href="/2023/03/21/buaa-co-2022-p5/"/>
      <url>/2023/03/21/buaa-co-2022-p5/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="P5-CPU"><a href="#P5-CPU" class="headerlink" title="P5_CPU"></a>P5_CPU</h1><h2 id="流水线架构"><a href="#流水线架构" class="headerlink" title="流水线架构"></a>流水线架构</h2><table><thead><tr><th>阶段</th><th>简称</th><th>功能概述</th></tr></thead><tbody><tr><td>取指阶段（Fetch）</td><td>F</td><td>从指令存储器中读取指令</td></tr><tr><td>译码阶段（Decode）</td><td>D</td><td>从寄存器文件中读取源操作数并对指令译码以便得到控制信号</td></tr><tr><td>执行阶段（Execute）</td><td>E</td><td>使用 ALU 执行计算</td></tr><tr><td>存储阶段（Memory）</td><td>M</td><td>读或写数据存储器</td></tr><tr><td>写回阶段（Writeback）</td><td>W</td><td>将结果写回到寄存器文件</td></tr></tbody></table><ul><li>流水线寄存器以其供给数据的流水级的简称命名</li></ul><h3 id="取指阶段（Fetch）"><a href="#取指阶段（Fetch）" class="headerlink" title="取指阶段（Fetch）"></a>取指阶段（Fetch）</h3><h4 id="PC"><a href="#PC" class="headerlink" title="PC"></a>PC</h4><p>这里的 $PC$ 采用下面这种方式直接<strong>在顶层模块 $mips$ 中</strong>实现：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> PC<span class="token punctuation">;</span><span class="token keyword">initial</span> <span class="token keyword">begin</span>    PC <span class="token operator">=</span> <span class="token number">32'h00003000</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>reset<span class="token punctuation">)</span> <span class="token keyword">begin</span>        PC <span class="token operator">&lt;=</span> <span class="token number">32'h00003000</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">else</span> <span class="token keyword">begin</span>        PC <span class="token operator">&lt;=</span> NPC_NPC<span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="im-v"><a href="#im-v" class="headerlink" title="im.v"></a>im.v</h4><h5 id="端口定义"><a href="#端口定义" class="headerlink" title="端口定义"></a>端口定义</h5><table><thead><tr><th align="center">名称</th><th align="center">描述</th><th align="center">位宽</th><th align="center">方向</th></tr></thead><tbody><tr><td align="center">PC</td><td align="center">当前指令地址</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">instr</td><td align="center">取出的指令</td><td align="center">32</td><td align="center">O</td></tr></tbody></table><h4 id="npc-v"><a href="#npc-v" class="headerlink" title="npc.v"></a>npc.v</h4><h5 id="端口定义-1"><a href="#端口定义-1" class="headerlink" title="端口定义"></a>端口定义</h5><table><thead><tr><th align="center">名称</th><th align="center">描述</th><th align="center">位宽</th><th align="center">方向</th></tr></thead><tbody><tr><td align="center">Stall</td><td align="center">暂停信号</td><td align="center">1</td><td align="center">I</td></tr><tr><td align="center">PC</td><td align="center">当前指令地址</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">imm26</td><td align="center">26位立即数</td><td align="center">26</td><td align="center">I</td></tr><tr><td align="center">EXT</td><td align="center">位扩展器结果</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">ra</td><td align="center">寄存器的值</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">nPC_sel</td><td align="center">跳转控制信号</td><td align="center">2</td><td align="center">I</td></tr><tr><td align="center">isSame</td><td align="center">相等比较信号</td><td align="center">1</td><td align="center">I</td></tr><tr><td align="center">isNega</td><td align="center">相反比较信号</td><td align="center">1</td><td align="center">I</td></tr><tr><td align="center">NPC</td><td align="center">下一条指令地址</td><td align="center">32</td><td align="center">O</td></tr><tr><td align="center">flush</td><td align="center">清空延迟槽信号</td><td align="center">1</td><td align="center">O</td></tr></tbody></table><ul><li>若暂停信号 $Stall$ 有效，则 $NPC$ 保持不变</li><li>若对应指令满足清空延迟槽条件，则输出清空延迟槽信号 $flush$ 为 $1$</li></ul><h4 id="d-reg-v"><a href="#d-reg-v" class="headerlink" title="d_reg.v"></a>d_reg.v</h4><h5 id="端口定义-2"><a href="#端口定义-2" class="headerlink" title="端口定义"></a>端口定义</h5><table><thead><tr><th align="center">名称</th><th align="center">描述</th><th align="center">位宽</th><th align="center">方向</th></tr></thead><tbody><tr><td align="center">clk</td><td align="center">时钟信号</td><td align="center">1</td><td align="center">I</td></tr><tr><td align="center">reset</td><td align="center">同步复位信号</td><td align="center">1</td><td align="center">I</td></tr><tr><td align="center">Stall</td><td align="center">暂停信号</td><td align="center">1</td><td align="center">I</td></tr><tr><td align="center">flush</td><td align="center">清空延迟槽</td><td align="center">1</td><td align="center">I</td></tr><tr><td align="center">instr_in</td><td align="center">F级指令</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">PC_in</td><td align="center">F级PC</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">instr_out</td><td align="center">D级指令</td><td align="center">32</td><td align="center">O</td></tr><tr><td align="center">PC_out</td><td align="center">D级PC</td><td align="center">32</td><td align="center">O</td></tr></tbody></table><ul><li>若暂停信号 $Stall$ 有效，则 $instr_out$ 与 $PC_out$ 保持不变</li><li>若清空延迟槽信号 $flush$ 有效<strong>且暂停信号 $Stall$ 无效</strong>，则清空 $D$ 级寄存器</li></ul><h3 id="译码阶段（Decord）"><a href="#译码阶段（Decord）" class="headerlink" title="译码阶段（Decord）"></a>译码阶段（Decord）</h3><h4 id="Stall"><a href="#Stall" class="headerlink" title="Stall"></a>Stall</h4><p>当一个指令到达 $D$ 级后，我们需要将它的 $T_{use}$ 值与后面每一级的 $T_{new}$ 进行比较，并进行 $A$ 值的校验。</p><ul><li><p>当 $T_{use} ≥ T_{new}$ 时，我们可以通过<strong>转发</strong>来解决冒险 </p></li><li><p>当 $T_{use} &lt; T_{new}$ 时，我们就需要<strong>阻塞</strong>流水线</p></li></ul><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">assign</span> Stall_RS <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>T_use_rs <span class="token operator">&lt;</span> T_new_E<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>rs <span class="token operator">==</span> A3_E<span class="token punctuation">)</span> <span class="token operator">&amp;</span> RegWrite_E<span class="token punctuation">)</span> <span class="token operator">|</span>                   <span class="token punctuation">(</span><span class="token punctuation">(</span>T_use_rs <span class="token operator">&lt;</span> T_new_M<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>rs <span class="token operator">==</span> A3_M<span class="token punctuation">)</span> <span class="token operator">&amp;</span> RegWrite_M<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>    <span class="token punctuation">(</span>rs <span class="token operator">!=</span> <span class="token number">5'd0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assign</span> Stall_RT <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>T_use_rt <span class="token operator">&lt;</span> T_new_E<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>rt <span class="token operator">==</span> A3_E<span class="token punctuation">)</span> <span class="token operator">&amp;</span> RegWrite_E<span class="token punctuation">)</span> <span class="token operator">|</span>                   <span class="token punctuation">(</span><span class="token punctuation">(</span>T_use_rt <span class="token operator">&lt;</span> T_new_M<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>rt <span class="token operator">==</span> A3_M<span class="token punctuation">)</span> <span class="token operator">&amp;</span> RegWrite_M<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>    <span class="token punctuation">(</span>rt <span class="token operator">!=</span> <span class="token number">5'd0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assign</span> Stall <span class="token operator">=</span> Stall_RS <span class="token operator">|</span> Stall_RT<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ctrl-v"><a href="#ctrl-v" class="headerlink" title="ctrl.v"></a>ctrl.v</h4><h5 id="端口定义-3"><a href="#端口定义-3" class="headerlink" title="端口定义"></a>端口定义</h5><table><thead><tr><th align="center">名称</th><th align="center">描述</th><th align="center">位宽</th><th align="center">方向</th></tr></thead><tbody><tr><td align="center">op</td><td align="center">指令操作码</td><td align="center">6</td><td align="center">I</td></tr><tr><td align="center">funct</td><td align="center">指令功能码</td><td align="center">6</td><td align="center">I</td></tr><tr><td align="center">RegDst</td><td align="center">GRF写地址选择信号</td><td align="center">2</td><td align="center">O</td></tr><tr><td align="center">ExtOP</td><td align="center">位扩展控制码</td><td align="center">2</td><td align="center">O</td></tr><tr><td align="center">ALUSrc</td><td align="center">ALU操作数B选择信号</td><td align="center">1</td><td align="center">O</td></tr><tr><td align="center">ALUOP</td><td align="center">ALU控制码</td><td align="center">4</td><td align="center">O</td></tr><tr><td align="center">RegWrite</td><td align="center">寄存器写使能</td><td align="center">1</td><td align="center">O</td></tr><tr><td align="center">MemtoReg</td><td align="center">寄存器写数据选择信号</td><td align="center">2</td><td align="center">O</td></tr><tr><td align="center">storeOP</td><td align="center">数据存储器写数据控制信号</td><td align="center">2</td><td align="center">O</td></tr><tr><td align="center">DextOP</td><td align="center">数据存储器数据扩展信号</td><td align="center">3</td><td align="center">O</td></tr><tr><td align="center">nPC_sel</td><td align="center">跳转控制信号</td><td align="center">3</td><td align="center">O</td></tr><tr><td align="center">T_use_rs</td><td align="center">GPR[rs]的需求时间</td><td align="center">2</td><td align="center">O</td></tr><tr><td align="center">T_use_rt</td><td align="center">GPR[rt]的需求时间</td><td align="center">2</td><td align="center">O</td></tr></tbody></table><ul><li>这里采用了<strong>控制信号驱动型</strong>的<strong>集中式译码</strong></li></ul><h5 id="控制信号"><a href="#控制信号" class="headerlink" title="控制信号"></a>控制信号</h5><table><thead><tr><th align="center"></th><th align="center">add(addu)</th><th align="center">sub(subu)</th><th align="center">and(or)</th><th align="center">slt(sltu)</th><th align="center">addi(addiu)</th><th align="center">andi(ori)</th><th align="center">lui</th><th align="center">lw</th><th align="center">sw</th></tr></thead><tbody><tr><td align="center"><strong>RegDst</strong></td><td align="center">01</td><td align="center">01</td><td align="center">01</td><td align="center">01</td><td align="center">00</td><td align="center">00</td><td align="center">00</td><td align="center">00</td><td align="center">X</td></tr><tr><td align="center"><strong>ExtOp</strong></td><td align="center">X</td><td align="center">X</td><td align="center">X</td><td align="center">X</td><td align="center">SIGN</td><td align="center">ZERO</td><td align="center">HIGN</td><td align="center">SIGN</td><td align="center">SIGN</td></tr><tr><td align="center"><strong>ALUSrc</strong></td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center"><strong>ALUOP</strong></td><td align="center">ADD</td><td align="center">SUB</td><td align="center">AND(OR)</td><td align="center">SLT(SLTU)</td><td align="center">ADD</td><td align="center">AND(OR)</td><td align="center">ADD</td><td align="center">ADD</td><td align="center">ADD</td></tr><tr><td align="center"><strong>RegWrite</strong></td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center"><strong>MemWrite</strong></td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td></tr><tr><td align="center"><strong>MemtoReg</strong></td><td align="center">00</td><td align="center">00</td><td align="center">00</td><td align="center">00</td><td align="center">00</td><td align="center">00</td><td align="center">00</td><td align="center">01</td><td align="center">X</td></tr><tr><td align="center"><strong>nPC_sel</strong></td><td align="center">PC4</td><td align="center">PC4</td><td align="center">PC4</td><td align="center">PC4</td><td align="center">PC4</td><td align="center">PC4</td><td align="center">PC4</td><td align="center">PC4</td><td align="center">PC4</td></tr><tr><td align="center"><strong>T_use_rs</strong></td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">3</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center"><strong>T_use_rt</strong></td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">3</td><td align="center">3</td><td align="center">3</td><td align="center">3</td><td align="center">2</td></tr></tbody></table><ul><li>信号 $storeOP$ 只对指令 $sw(2’d1), sh(2’d2), sb(2’d3)$ 生效，未列于表中</li><li>信号 $DextOP$ 只对指令 $lw(dext_lw), lh(dext_lh), lhu(dext_lhu), lb(dext_lb), lbu(dext_lbu)$ 生效，未列于表中</li><li>指令的需求时间 $T_{use}$ 是指这条指令位于 $D$ 级的时候，<strong>再经过多少个时钟周期就必须要使用相应的数据</strong></li><li>实际上， $T_{use}$ 的最大值为 $2’d2$ ，当指令用不到 $GPR[rs]$ 或 $GPR[rt]$ 时，我们将对应的置 $T_{use}$ 为 $2’d3$ ，这并不会影响我们对转发和暂停的判断</li></ul><h4 id="grf-v"><a href="#grf-v" class="headerlink" title="grf.v"></a>grf.v</h4><h5 id="端口定义-4"><a href="#端口定义-4" class="headerlink" title="端口定义"></a>端口定义</h5><table><thead><tr><th align="center">名称</th><th align="center">描述</th><th align="center">位宽</th><th align="center">方向</th></tr></thead><tbody><tr><td align="center">clk</td><td align="center">时钟信号</td><td align="center">1</td><td align="center">I</td></tr><tr><td align="center">reset</td><td align="center">同步复位信号</td><td align="center">1</td><td align="center">I</td></tr><tr><td align="center">RegWrite</td><td align="center">寄存器写使能</td><td align="center">1</td><td align="center">I</td></tr><tr><td align="center">PC</td><td align="center">当前指令的地址</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">A1</td><td align="center">读地址1</td><td align="center">5</td><td align="center">I</td></tr><tr><td align="center">A2</td><td align="center">读地址2</td><td align="center">5</td><td align="center">I</td></tr><tr><td align="center">A3</td><td align="center">读地址3</td><td align="center">5</td><td align="center">I</td></tr><tr><td align="center">WD</td><td align="center">写数据</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">RD1</td><td align="center">输出A1指定的寄存器数据</td><td align="center">32</td><td align="center">O</td></tr><tr><td align="center">RD2</td><td align="center">输出A2指定的寄存器数据</td><td align="center">32</td><td align="center">O</td></tr></tbody></table><h4 id="ext-v"><a href="#ext-v" class="headerlink" title="ext.v"></a>ext.v</h4><h5 id="端口定义-5"><a href="#端口定义-5" class="headerlink" title="端口定义"></a>端口定义</h5><table><thead><tr><th align="center">名称</th><th align="center">描述</th><th align="center">位宽</th><th align="center">方向</th></tr></thead><tbody><tr><td align="center">imm16</td><td align="center">16位立即数</td><td align="center">16</td><td align="center">I</td></tr><tr><td align="center">ExtOP</td><td align="center">位扩展控制码</td><td align="center">2</td><td align="center">I</td></tr><tr><td align="center">EXT_Result</td><td align="center">位扩展结果</td><td align="center">32</td><td align="center">O</td></tr></tbody></table><h4 id="cmp-v"><a href="#cmp-v" class="headerlink" title="cmp.v"></a>cmp.v</h4><h5 id="端口定义-6"><a href="#端口定义-6" class="headerlink" title="端口定义"></a>端口定义</h5><table><thead><tr><th align="center">名称</th><th align="center">描述</th><th align="center">位宽</th><th align="center">方向</th></tr></thead><tbody><tr><td align="center">GRF_RD1</td><td align="center">GRF读数据1</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">GRF_RD2</td><td align="center">GRF读数据2</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">isSame</td><td align="center">相等比较信号</td><td align="center">1</td><td align="center">O</td></tr><tr><td align="center">isNega</td><td align="center">相反比较信号</td><td align="center">1</td><td align="center">O</td></tr></tbody></table><ul><li>这里添加一个 $CMP$ 模块是为了将**$B$ 类跳转指令的<strong>判定</strong>提前至 $D$ 级**来进行，不再使用 $E$ 级的 $ALU$ 来进行判定</li></ul><h4 id="e-reg-v"><a href="#e-reg-v" class="headerlink" title="e_reg.v"></a>e_reg.v</h4><h5 id="端口定义-7"><a href="#端口定义-7" class="headerlink" title="端口定义"></a>端口定义</h5><table><thead><tr><th align="center">名称</th><th align="center">描述</th><th align="center">位宽</th><th align="center">方向</th></tr></thead><tbody><tr><td align="center">clk</td><td align="center">时钟信号</td><td align="center">1</td><td align="center">I</td></tr><tr><td align="center">reset</td><td align="center">同步复位信号</td><td align="center">1</td><td align="center">I</td></tr><tr><td align="center">Stall</td><td align="center">暂停信号</td><td align="center">1</td><td align="center">I</td></tr><tr><td align="center">PC_in</td><td align="center">D级PC</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">op</td><td align="center">D级指令操作码</td><td align="center">6</td><td align="center">I</td></tr><tr><td align="center">funct</td><td align="center">D级指令功能码</td><td align="center">6</td><td align="center">I</td></tr><tr><td align="center">shamt_in</td><td align="center">D级shamt</td><td align="center">5</td><td align="center">I</td></tr><tr><td align="center">ALUSrc_in</td><td align="center">D级ALUSrc</td><td align="center">1</td><td align="center">I</td></tr><tr><td align="center">ALUOP_in</td><td align="center">D级ALUOP</td><td align="center">4</td><td align="center">I</td></tr><tr><td align="center">RegWrite_in</td><td align="center">D级RegWrite</td><td align="center">1</td><td align="center">I</td></tr><tr><td align="center">MemtoReg_in</td><td align="center">D级MemtoReg</td><td align="center">2</td><td align="center">I</td></tr><tr><td align="center">storeOP_in</td><td align="center">D级storeOP</td><td align="center">2</td><td align="center">I</td></tr><tr><td align="center">DextOP_in</td><td align="center">D级DextOP</td><td align="center">3</td><td align="center">I</td></tr><tr><td align="center">A1_in</td><td align="center">D级寄存器读地址1</td><td align="center">5</td><td align="center">I</td></tr><tr><td align="center">A2_in</td><td align="center">D级寄存器读地址2</td><td align="center">5</td><td align="center">I</td></tr><tr><td align="center">GRF_RD1_in</td><td align="center">D级寄存器读数据1</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">GRF_RD2_in</td><td align="center">D级寄存器读数据2</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">A3_in</td><td align="center">D级寄存器写地址</td><td align="center">5</td><td align="center">I</td></tr><tr><td align="center">EXT_Result_in</td><td align="center">D级位扩展结果</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">PC_out</td><td align="center">E级PC</td><td align="center">32</td><td align="center">O</td></tr><tr><td align="center">shamt_out</td><td align="center">E级shamt</td><td align="center">5</td><td align="center">O</td></tr><tr><td align="center">T_new</td><td align="center">E级指令供给时间</td><td align="center">2</td><td align="center">O</td></tr><tr><td align="center">ALUSrc_out</td><td align="center">E级ALUSrc</td><td align="center">1</td><td align="center">O</td></tr><tr><td align="center">ALUOP_out</td><td align="center">E级ALUOP</td><td align="center">4</td><td align="center">O</td></tr><tr><td align="center">RegWrite_out</td><td align="center">E级RegWrite</td><td align="center">1</td><td align="center">O</td></tr><tr><td align="center">MemtoReg_out</td><td align="center">E级MemtoReg</td><td align="center">2</td><td align="center">O</td></tr><tr><td align="center">storeOP</td><td align="center">E级storeOP</td><td align="center">2</td><td align="center">O</td></tr><tr><td align="center">DextOP</td><td align="center">E级DextOP</td><td align="center">3</td><td align="center">O</td></tr><tr><td align="center">A1_out</td><td align="center">E级寄存器读地址1</td><td align="center">5</td><td align="center">O</td></tr><tr><td align="center">A2_out</td><td align="center">E级寄存器读地址2</td><td align="center">5</td><td align="center">O</td></tr><tr><td align="center">GRF_RD1_out</td><td align="center">E级寄存器读数据1</td><td align="center">32</td><td align="center">O</td></tr><tr><td align="center">GRF_RD2_out</td><td align="center">E级寄存器读数据2</td><td align="center">32</td><td align="center">O</td></tr><tr><td align="center">A3_out</td><td align="center">E级寄存器写地址</td><td align="center">5</td><td align="center">O</td></tr><tr><td align="center">EXT_Result_out</td><td align="center">E级位扩展结果</td><td align="center">32</td><td align="center">O</td></tr></tbody></table><ul><li>指令的供给时间 $T_{new}$ 是指位于<strong>某个流水级</strong>的<strong>某个指令</strong>，它经过多少个时钟周期可以算出结果并且<strong>存储到流水级寄存器里</strong></li><li>若暂停信号 $Stall$ 有效，则清空 $E_REG$ (效果同 $reset$ )</li></ul><h3 id="执行阶段（Excute）"><a href="#执行阶段（Excute）" class="headerlink" title="执行阶段（Excute）"></a>执行阶段（Excute）</h3><h4 id="alu-v"><a href="#alu-v" class="headerlink" title="alu.v"></a>alu.v</h4><h5 id="端口定义-8"><a href="#端口定义-8" class="headerlink" title="端口定义"></a>端口定义</h5><table><thead><tr><th align="center">名称</th><th align="center">描述</th><th align="center">位宽</th><th align="center">方向</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">操作数A</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">B</td><td align="center">操作数B</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">shamt</td><td align="center">移位数</td><td align="center">5</td><td align="center">I</td></tr><tr><td align="center">ALUOp</td><td align="center">ALU控制码</td><td align="center">4</td><td align="center">I</td></tr><tr><td align="center">C</td><td align="center">运算结果</td><td align="center">32</td><td align="center">O</td></tr><tr><td align="center">isZero</td><td align="center">零判断</td><td align="center">1</td><td align="center">O</td></tr></tbody></table><h4 id="m-meg-v"><a href="#m-meg-v" class="headerlink" title="m_meg.v"></a>m_meg.v</h4><h5 id="端口定义-9"><a href="#端口定义-9" class="headerlink" title="端口定义"></a>端口定义</h5><table><thead><tr><th align="center">名称</th><th align="center">描述</th><th align="center">位宽</th><th align="center">方向</th></tr></thead><tbody><tr><td align="center">clk</td><td align="center">时钟信号</td><td align="center">1</td><td align="center">I</td></tr><tr><td align="center">reset</td><td align="center">同步复位信号</td><td align="center">1</td><td align="center">I</td></tr><tr><td align="center">PC_in</td><td align="center">E级PC</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">T_new_in</td><td align="center">E级指令供给时间</td><td align="center">2</td><td align="center">I</td></tr><tr><td align="center">RegWrite_in</td><td align="center">E级RegWrite</td><td align="center">1</td><td align="center">I</td></tr><tr><td align="center">MemtoReg_in</td><td align="center">E级MemtoReg</td><td align="center">2</td><td align="center">I</td></tr><tr><td align="center">storeOP_in</td><td align="center">E级storeOP</td><td align="center">2</td><td align="center">I</td></tr><tr><td align="center">DextOP_in</td><td align="center">E级DextOP</td><td align="center">3</td><td align="center">I</td></tr><tr><td align="center">A1_in</td><td align="center">E级寄存器读地址1</td><td align="center">5</td><td align="center">I</td></tr><tr><td align="center">A2_in</td><td align="center">E级寄存器读地址2</td><td align="center">5</td><td align="center">I</td></tr><tr><td align="center">A3_in</td><td align="center">E级寄存器写地址</td><td align="center">5</td><td align="center">I</td></tr><tr><td align="center">ALU_C_in</td><td align="center">E级ALU计算结果</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">GRF_RD2_in</td><td align="center">E级寄存器读数据2</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">PC_out</td><td align="center">M级PC</td><td align="center">32</td><td align="center">O</td></tr><tr><td align="center">T_new_out</td><td align="center">M级指令供给时间</td><td align="center">2</td><td align="center">O</td></tr><tr><td align="center">RegWrite_out</td><td align="center">M级RegWrite</td><td align="center">1</td><td align="center">O</td></tr><tr><td align="center">MemtoReg_out</td><td align="center">M级MemtoReg</td><td align="center">2</td><td align="center">O</td></tr><tr><td align="center">storeOP_out</td><td align="center">M级storeOP</td><td align="center">2</td><td align="center">O</td></tr><tr><td align="center">DextOP_out</td><td align="center">M级DextOP</td><td align="center">3</td><td align="center">O</td></tr><tr><td align="center">A1_out</td><td align="center">M级寄存器读地址1</td><td align="center">5</td><td align="center">O</td></tr><tr><td align="center">A2_out</td><td align="center">M级寄存器读地址2</td><td align="center">5</td><td align="center">O</td></tr><tr><td align="center">A3_out</td><td align="center">M级寄存器写地址</td><td align="center">5</td><td align="center">O</td></tr><tr><td align="center">ALU_C_out</td><td align="center">M级ALU计算结果</td><td align="center">32</td><td align="center">O</td></tr><tr><td align="center">GRF_RD2_out</td><td align="center">M级寄存器读数据2</td><td align="center">32</td><td align="center">O</td></tr></tbody></table><h3 id="存储阶段（Memory"><a href="#存储阶段（Memory" class="headerlink" title="存储阶段（Memory)"></a>存储阶段（Memory)</h3><h4 id="dm-v"><a href="#dm-v" class="headerlink" title="dm.v"></a>dm.v</h4><h5 id="端口定义-10"><a href="#端口定义-10" class="headerlink" title="端口定义"></a>端口定义</h5><table><thead><tr><th align="center">名称</th><th align="center">描述</th><th align="center">位宽</th><th align="center">方向</th></tr></thead><tbody><tr><td align="center">clk</td><td align="center">时钟信号</td><td align="center">1</td><td align="center">I</td></tr><tr><td align="center">reset</td><td align="center">同步复位信号</td><td align="center">1</td><td align="center">I</td></tr><tr><td align="center">PC</td><td align="center">M级PC</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">A</td><td align="center">数据存储器读写地址</td><td align="center">5</td><td align="center">I</td></tr><tr><td align="center">WD</td><td align="center">DM写数据</td><td align="center">2</td><td align="center">I</td></tr><tr><td align="center">byteen</td><td align="center">数据存储器字节写使能</td><td align="center">4</td><td align="center">I</td></tr><tr><td align="center">RD</td><td align="center">DM读数据</td><td align="center">32</td><td align="center">O</td></tr></tbody></table><ul><li>这里可以用 $|byteen$ 来代替原先的数据存储器写使能信号 $MemWrite$</li></ul><h4 id="w-reg-v"><a href="#w-reg-v" class="headerlink" title="w_reg.v"></a>w_reg.v</h4><h5 id="端口定义-11"><a href="#端口定义-11" class="headerlink" title="端口定义"></a>端口定义</h5><table><thead><tr><th align="center">名称</th><th align="center">描述</th><th align="center">位宽</th><th align="center">方向</th></tr></thead><tbody><tr><td align="center">clk</td><td align="center">时钟信号</td><td align="center">1</td><td align="center">I</td></tr><tr><td align="center">reset</td><td align="center">同步复位信号</td><td align="center">1</td><td align="center">I</td></tr><tr><td align="center">PC_in</td><td align="center">M级PC</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">T_new_in</td><td align="center">M级指令供给时间</td><td align="center">2</td><td align="center">I</td></tr><tr><td align="center">RegWrite_in</td><td align="center">M级RegWrite</td><td align="center">1</td><td align="center">I</td></tr><tr><td align="center">MemtoReg_in</td><td align="center">M级MemtoReg</td><td align="center">2</td><td align="center">I</td></tr><tr><td align="center">A3_in</td><td align="center">M级寄存器写地址</td><td align="center">5</td><td align="center">I</td></tr><tr><td align="center">ALU_C_in</td><td align="center">M级ALU计算结果</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">DM_RD_in</td><td align="center">M级DM读数据</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">PC_out</td><td align="center">W级PC</td><td align="center">32</td><td align="center">O</td></tr><tr><td align="center">T_new_out</td><td align="center">W级指令供给时间</td><td align="center">2</td><td align="center">O</td></tr><tr><td align="center">RegWrite_out</td><td align="center">W级RegWrite</td><td align="center">1</td><td align="center">O</td></tr><tr><td align="center">MemtoReg_out</td><td align="center">W级MemtoReg</td><td align="center">2</td><td align="center">O</td></tr><tr><td align="center">A3_out</td><td align="center">W级寄存器写地址</td><td align="center">5</td><td align="center">O</td></tr><tr><td align="center">ALU_C_out</td><td align="center">W级ALU计算结果</td><td align="center">32</td><td align="center">O</td></tr><tr><td align="center">DM_RD_out</td><td align="center">W级DM读数据</td><td align="center">32</td><td align="center">O</td></tr></tbody></table><h2 id="流水线冒险"><a href="#流水线冒险" class="headerlink" title="流水线冒险"></a>流水线冒险</h2><h3 id="冒险的种类"><a href="#冒险的种类" class="headerlink" title="冒险的种类"></a>冒险的种类</h3><h4 id="结构冒险"><a href="#结构冒险" class="headerlink" title="结构冒险"></a>结构冒险</h4><p>结构冒险是指<strong>不同指令同时需要使用同一资源</strong>的情况。例如在普林斯顿结构中，指令存储器和数据存储器是同一存储器，在取指阶段和存储阶段都需要使用这个存储器，这时便产生了结构冒险。我们的实验采用哈佛体系结构，将指令存储器和数据存储器分开，因此不存在这种结构冒险。</p><p>另一种结构冒险在于寄存器文件需要在 $D$ 级和 $W$ 级同时被使用（读写）时并且读和写的寄存器为同一个寄存器时。</p><h4 id="控制冒险"><a href="#控制冒险" class="headerlink" title="控制冒险"></a>控制冒险</h4><p>控制冒险，是指<strong>分支指令（如 $beq$ ）的判断结果会影响接下来指令的执行流</strong>的情况。在判断结果产生之前，我们无法预测分支是否会发生。然而，此时流水线还会继续取指，让后续指令进入流水线。这时就有可能导致错误的产生，即不该被执行的指令进入到了指令的执行流中。</p><h4 id="数据冒险"><a href="#数据冒险" class="headerlink" title="数据冒险"></a>数据冒险</h4><p>流水线之所以会产生数据冒险，就是因为后面指令需求的数据，正好就是前面指令供给的数据，而后面指令在需要使用数据时，前面供给的数据还没有存入寄存器堆，从而导致后面的指令不能正常地读取到正确的数据。</p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p><em>1、我们使用提前分支判断的方法尽早产生结果来减少因不确定而带来的开销，但实际上这种方法并非总能提高效率，请从流水线冒险的角度思考其原因并给出一个指令序列的例子。</em></p><p>答：将分支判断提前至 $D$ 级进行时，我们常常需要利用 $E$ 级 $ALU$ 计算的结果，而这个结果在下一个周期才能存入 $E$ 级寄存器，这时会使得流水线被<strong>阻塞</strong>一个周期，流水线的效率受到了一定的影响。</p><pre class="line-numbers language-none"><code class="language-none">ori  $t0, $0, 0x1beq  $t0, $0, loopnoploop:...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>2、因为延迟槽的存在，对于 jal 等需要将指令地址写入寄存器的指令，要写回 PC + 8，请思考为什么这样设计？</em></p><p>答：因为地址为 $PC + 4$ 的指令位于延迟槽中，一定会被执行，跳转时要跳转到的指令地址为其后一条指令，即地址为 $PC + 8$ 的指令。</p><p><em>3、我们要求大家所有转发数据都来源于<strong>流水寄存器</strong>而不能是功能部件（如 DM 、 ALU ），请思考为什么？</em></p><p>答：若不这样做，会导致我们的流水线不能正常地<strong>并行</strong>运行，而是会将某两个流水级<strong>串行</strong>运行。这样降低了流水线工作的效率。</p><p><em>4、我们为什么要使用 GPR 内部转发？该如何实现？</em></p><p>答：因为 $GPR$ 既属于 $D$ 级，也属于 $W$ 级。当一条指令在 $D$ 级需要读出寄存器内的数据时，若此时位于 W 级的指令正在写寄存器，就可以利用 $GPR$ 的内部转发将这个写数据直接读出。</p><p><em>5、我们转发时数据的需求者和供给者可能来源于哪些位置？共有哪些转发数据通路？</em></p><p>答：需求者可能来源于 $D$ 、 $E$ 、 $M$ 级，供给者可能来源于 $E$ 、 $M$ 、 $W$ 级。</p><p>转发数据通路有： $D &lt;- E$ , $D &lt;- M$ , $D &lt;- W$ , $E &lt;- M$ , $E &lt;- W$ , $M &lt;- W$ 。</p><p><em>6、在课上测试时，我们需要你现场实现新的指令，对于这些新的指令，你可能需要在原有的数据通路上做哪些扩展或修改？提示：你可以对指令进行分类，思考每一类指令可能修改或扩展哪些位置。</em></p><p>答：课上指令大致可以分为计算类指令、条件跳转类指令、条件访存类指令。</p><ul><li><p>对于计算类指令，一般情况下只需要在译码时添加一个 $ALUOp$ ，在 $ALU$ 中来实现其运算操作即可。</p></li><li><p>对于条件跳转类指令，可以在译码时添加一个 $nPC_sel$ ，在 $NPC$ 模块中实现其对应的 $NPC$ 值，必要时应在 $NPC$ 以及 $CMP$ 模块中加入一些控制信号来辅助判断。比如可以添加 $flush$ 信号来判断是否需要清空延迟槽。</p></li><li><p>对于条件访存类指令，可能会增加 $GPR[rs]$ 值的流水，可能会因为写入的不确定性导致转发数据需要额外的判断。</p></li></ul><p><em>7、简要描述你的译码器架构，并思考该架构的优势以及不足。</em></p><p>答：我的译码器采用的是<strong>控制信号驱动型</strong>的<strong>集中式译码</strong>。</p><p>优势为只需要在 $D$ 级进行一次译码即可，比较简单粗暴，且指令数较多时代码量不见得很多。</p><p>不足为后续每一级流水级寄存器都要传递大量的控制信号，写起来比较繁琐复杂<del>（已经深刻体会到了）</del>。</p><h2 id="课上指令"><a href="#课上指令" class="headerlink" title="课上指令"></a>课上指令</h2><h3 id="BONALL"><a href="#BONALL" class="headerlink" title="BONALL"></a>BONALL</h3><p>先<strong>链接</strong>。如果 $GPR[rs]$ 和 $GPR[rt]$ 互为相反数，则跳转，否则<strong>清空延迟槽</strong>。</p><pre class="line-numbers language-none"><code class="language-none">ori  $7, $0, 0x1ori  $8, $0, 0x2sub  $9, $7, $8beq  $9, $7, loop1ori  $10, $0, 0x9999ori  $10, $0, 0x8888loop1:ori  $10, $0, 0x7777nopnopnopbeq  $9, $8, loop2ori  $11, $0, 0x9999ori  $11, $0, 0x8888loop2:ori  $11, $0, 0x7777nop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="由补码求原码"><a href="#由补码求原码" class="headerlink" title="由补码求原码"></a>由补码求原码</h3><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token kernel-function property">$signed</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>    Result <span class="token operator">=</span> A<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">==</span> <span class="token number">32'b0</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>    Result <span class="token operator">=</span> <span class="token number">32'h8000_0000</span><span class="token punctuation">;</span> <span class="token keyword">end</span><span class="token keyword">else</span> <span class="token keyword">begin</span>    Result <span class="token operator">=</span> <span class="token operator">{</span>A<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">~</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">31'h1</span><span class="token punctuation">)</span><span class="token operator">}</span><span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><p>接收新数据的流水级&lt;-发射新数据的流水级</p><h3 id="M-lt-W"><a href="#M-lt-W" class="headerlink" title="M <- W"></a>M &lt;- W</h3><p>M级要接收数据：</p><ul><li>FW_DM_WD_out</li></ul><p>W级可发射数据：</p><ul><li>PC_W + 32’h8</li><li>ALU_C_W</li></ul><h3 id="E-lt-W"><a href="#E-lt-W" class="headerlink" title="E <- W"></a>E &lt;- W</h3><p>E级要接收数据：</p><ul><li>FW_ALUA_out</li><li>FW_ALUB_out</li></ul><p>W级可发射数据：</p><ul><li>PC_W + 32’h8</li><li>ALU_C_W</li></ul><h3 id="D-lt-W"><a href="#D-lt-W" class="headerlink" title="D <- W"></a>D &lt;- W</h3><p>D级要接收数据：</p><ul><li>FW_RD1_out</li><li>FW_RD2_out</li></ul><p>W级可发射数据：</p><ul><li>PC_W + 32’h8</li><li>ALU_C_W</li></ul><h3 id="E-lt-M"><a href="#E-lt-M" class="headerlink" title="E <- M"></a>E &lt;- M</h3><p>E级要接收数据：</p><ul><li>FW_ALUA_out</li><li>FW_ALUB_out</li></ul><p>M级可发射数据：</p><ul><li>PC_M + 32’h8</li><li>ALU_C_M</li></ul><h3 id="D-lt-M"><a href="#D-lt-M" class="headerlink" title="D <- M"></a>D &lt;- M</h3><p>D级要接收数据：</p><ul><li>FW_RD1_out</li><li>FW_RD2_out</li></ul><p>M级可发射数据：</p><ul><li>PC_M + 32’h8</li><li>ALU_C_M</li></ul><h3 id="D-lt-E"><a href="#D-lt-E" class="headerlink" title="D <- E"></a>D &lt;- E</h3><p>D级要接收数据：</p><ul><li>FW_RD1_out</li><li>FW_RD2_out</li></ul><p>E级可发射数据：</p><ul><li>PC_E + 32’h8</li><li>EXT_Result_E</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-MIPS" data-language="MIPS"><code class="language-MIPS">######## M &lt;- W ########## FW_DM_WD_out &lt;- ALU_C_Wori $t1, $0, 0x1nopnopnopadd $t1, $t1, $t1sw $t1, 0($0)nopnopnop# FW_DM_WD_out &lt;- PC_W + 32'h8ori $t1, $0, 0x1nopnopnopjal test_m_wsw $ra, 0($0)ori $t1, $0, 0x2j test_m_w_endnoptest_m_w:ori $t1, $0, 0x3jr $ranopnopnoptest_m_w_end:nopnopnop######## E &lt;- W ########## FW_ALU_out &lt;- ALU_C_Wori $t1, $0, 0x1nopnopnopadd $t2, $t1, $t1nopadd $t3, $t2, $t2nopnopnop# FW_ALU_out &lt;- PC_W + 32'h8jal test_e_wnopj test_e_w_endnoptest_e_w:add $t4, $ra, $ranopnopnopjr $ranoptest_e_w_end:nopnopnop########## D &lt;- W ########## FW_RD12_out &lt;- ALU_C_Wori $t1, $0, 0x1111nopnopnopori $t2, $0, 0x2222nopnopnopadd $t3, $t1, $t1 # Wnop # Mnop # Ebeq $t3, $t2, test_d_w_1 # Dnopori $t1, $0, 0x3333test_d_w_1:ori $t1, $0, 0x1111nopnopnop######add $t4, $t1, $t1 # Wnop # Mnop # Ebeq $t2, $t4, test_d_w_2 # Dnopori $t1, $0, 0x5555test_d_w_2:ori $t1, $0, 0x6666nopnopnop# FW_RD12_out &lt;- PC_W + 32'h8ori $t5, $0, 0x314cnopnopnopjal test_d_w # Wnop # Mj test_d_w_endnoptest_d_w:nop # Ebeq $ra, $t5, test_d_w_3 # Dnopori $t1, $0, 0x3333test_d_w_3:nopnopnopjr $ranoptest_d_w_end:nopnopnop########### E &lt;- M ############ FW_ALU_out &lt;- ALU_C_Mori $t1, $0, 0x1nopnopnopadd $t2, $t1, $t1 # Madd $t3, $t2, $t2 # Enopnopnop# FW_ALU_out &lt;- PC_M + 32'h8jal test_e_m # Madd $t1, $ra, $ra # Ej test_e_m_endnoptest_e_m:nopnopnopjr $ranoptest_e_m_end:nopnopnop########## D &lt;- M ############ FW_RD12_out &lt;- ALU_C_Mori $t1, $0, 0x1111nopnopnopori $t2, $0, 0x2222nopnopnopori $t3, $0, 0nopnopnopadd $t3, $t1, $t1 # Mnop # Ebeq $t3, $t2, test_d_m_1 # Dnopori $t1, $0, 0x3333test_d_m_1:ori $t1, $0, 0x1111nopnopnop######add $t4, $t1, $t1 # Mnop # Ebeq $t2, $t4, test_d_m_2 # Dnopori $t1, $0, 0x5555test_d_m_2:ori $t1, $0, 0x6666nopnopnop# FW_RD12_out &lt;- PC_M + 32'h8ori $t5, $0, 0x3268nopnopnopjal test_d_m # Mnop # Ej test_d_m_endnoptest_d_m:beq $ra, $t5, test_d_m_3 # Dnopori $t1, $0, 0x3333test_d_m_3:nopnopnopjr $ranoptest_d_m_end:nopnopnop########### D &lt;- E ############ FW_RD12_out &lt;- EXT_Result_Elui $t1, 0x9nopnopnoplui $t2, 0x9 # E beq $t1, $t2, test_d_e_1nopori $t1, $0, 0x3333test_d_e_1:nopnopnop# FW_RD12_out &lt;- PC_M + 32'h8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUAA_CO_2022_P4</title>
      <link href="/2023/03/21/buaa-co-2022-p4/"/>
      <url>/2023/03/21/buaa-co-2022-p4/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="CPU设计文档"><a href="#CPU设计文档" class="headerlink" title="CPU设计文档"></a>CPU设计文档</h1><h2 id="ctrl模块"><a href="#ctrl模块" class="headerlink" title="ctrl模块"></a>ctrl模块</h2><h3 id="ctrl-v"><a href="#ctrl-v" class="headerlink" title="ctrl.v"></a>ctrl.v</h3><h4 id="端口定义"><a href="#端口定义" class="headerlink" title="端口定义"></a>端口定义</h4><table><thead><tr><th align="center">名称</th><th align="center">描述</th><th align="center">位宽</th><th align="center">方向</th></tr></thead><tbody><tr><td align="center">op</td><td align="center">指令操作码</td><td align="center">6</td><td align="center">I</td></tr><tr><td align="center">funct</td><td align="center">指令功能码</td><td align="center">6</td><td align="center">I</td></tr><tr><td align="center">RegDst</td><td align="center">GRF写地址选择信号</td><td align="center">2</td><td align="center">O</td></tr><tr><td align="center">ALUSrc</td><td align="center">ALU操作数B选择信号</td><td align="center">1</td><td align="center">O</td></tr><tr><td align="center">MemtoReg</td><td align="center">寄存器写数据选择信号</td><td align="center">2</td><td align="center">O</td></tr><tr><td align="center">RegWrite</td><td align="center">寄存器写使能</td><td align="center">1</td><td align="center">O</td></tr><tr><td align="center">MemWrite</td><td align="center">数据存储器写使能</td><td align="center">1</td><td align="center">O</td></tr><tr><td align="center">nPC_sel</td><td align="center">跳转控制信号</td><td align="center">2</td><td align="center">O</td></tr><tr><td align="center">ALUOp</td><td align="center">ALU控制码</td><td align="center">4</td><td align="center">O</td></tr><tr><td align="center">ExtOp</td><td align="center">位扩展控制码</td><td align="center">2</td><td align="center">O</td></tr></tbody></table><h4 id="控制信号"><a href="#控制信号" class="headerlink" title="控制信号"></a>控制信号</h4><table><thead><tr><th align="center"></th><th align="center">add</th><th align="center">sub</th><th align="center">ori</th><th align="center">lw</th><th align="center">sw</th><th align="center">beq</th><th align="center">lui</th><th align="center">jal</th><th align="center">jr</th></tr></thead><tbody><tr><td align="center"><strong>RegDst</strong></td><td align="center">01</td><td align="center">01</td><td align="center">00</td><td align="center">00</td><td align="center">X</td><td align="center">X</td><td align="center">00</td><td align="center">10</td><td align="center">X</td></tr><tr><td align="center"><strong>ALUSrc</strong></td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">0</td><td align="center">1</td><td align="center">X</td><td align="center">X</td></tr><tr><td align="center"><strong>MemtoReg</strong></td><td align="center">00</td><td align="center">00</td><td align="center">00</td><td align="center">01</td><td align="center">X</td><td align="center">X</td><td align="center">00</td><td align="center">10</td><td align="center">X</td></tr><tr><td align="center"><strong>RegWrite</strong></td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center"><strong>MemWrite</strong></td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center"><strong>nPC_sel</strong></td><td align="center">00</td><td align="center">00</td><td align="center">00</td><td align="center">00</td><td align="center">00</td><td align="center">01</td><td align="center">00</td><td align="center">10</td><td align="center">11</td></tr><tr><td align="center"><strong>ALUctr</strong></td><td align="center">ADD</td><td align="center">SUB</td><td align="center">OR</td><td align="center">ADD</td><td align="center">ADD</td><td align="center">SUB</td><td align="center">ADD</td><td align="center">X</td><td align="center">X</td></tr><tr><td align="center"><strong>ExtOp</strong></td><td align="center">X</td><td align="center">X</td><td align="center">Zero</td><td align="center">Sign</td><td align="center">Sign</td><td align="center">Sign</td><td align="center">High</td><td align="center">X</td><td align="center">X</td></tr></tbody></table><h2 id="Datapath模块"><a href="#Datapath模块" class="headerlink" title="Datapath模块"></a>Datapath模块</h2><h3 id="grf-v"><a href="#grf-v" class="headerlink" title="grf.v"></a>grf.v</h3><table><thead><tr><th align="center">名称</th><th align="center">描述</th><th align="center">位宽</th><th align="center">方向</th></tr></thead><tbody><tr><td align="center">clk</td><td align="center">时钟信号</td><td align="center">1</td><td align="center">I</td></tr><tr><td align="center">reset</td><td align="center">同步复位信号</td><td align="center">1</td><td align="center">I</td></tr><tr><td align="center">RegWrite</td><td align="center">寄存器写使能</td><td align="center">1</td><td align="center">I</td></tr><tr><td align="center">PC</td><td align="center">当前指令的地址</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">A1</td><td align="center">读地址1</td><td align="center">5</td><td align="center">I</td></tr><tr><td align="center">A2</td><td align="center">读地址2</td><td align="center">5</td><td align="center">I</td></tr><tr><td align="center">A3</td><td align="center">读地址3</td><td align="center">5</td><td align="center">I</td></tr><tr><td align="center">WD</td><td align="center">写数据</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">RD1</td><td align="center">输出A1指定的寄存器数据</td><td align="center">32</td><td align="center">O</td></tr><tr><td align="center">RD2</td><td align="center">输出A2指定的寄存器数据</td><td align="center">32</td><td align="center">O</td></tr></tbody></table><h3 id="alu-v"><a href="#alu-v" class="headerlink" title="alu.v"></a>alu.v</h3><h4 id="端口定义-1"><a href="#端口定义-1" class="headerlink" title="端口定义"></a>端口定义</h4><table><thead><tr><th align="center">名称</th><th align="center">描述</th><th align="center">位宽</th><th align="center">方向</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">操作数A</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">B</td><td align="center">操作数B</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">shamt</td><td align="center">移位数</td><td align="center">5</td><td align="center">I</td></tr><tr><td align="center">ALUOp</td><td align="center">ALU控制码</td><td align="center">4</td><td align="center">I</td></tr><tr><td align="center">C</td><td align="center">运算结果</td><td align="center">32</td><td align="center">O</td></tr><tr><td align="center">isZero</td><td align="center">零判断</td><td align="center">1</td><td align="center">O</td></tr></tbody></table><h4 id="ALU控制码"><a href="#ALU控制码" class="headerlink" title="ALU控制码"></a>ALU控制码</h4><table><thead><tr><th align="center">ALUop</th><th align="center">Function</th></tr></thead><tbody><tr><td align="center">0000</td><td align="center">ADD</td></tr><tr><td align="center">0001</td><td align="center">SUB</td></tr><tr><td align="center">0010</td><td align="center">OR</td></tr><tr><td align="center">0011</td><td align="center">AND</td></tr><tr><td align="center">0100</td><td align="center">XOR</td></tr></tbody></table><h3 id="ext-v"><a href="#ext-v" class="headerlink" title="ext.v"></a>ext.v</h3><h4 id="端口定义-2"><a href="#端口定义-2" class="headerlink" title="端口定义"></a>端口定义</h4><table><thead><tr><th align="center">名称</th><th align="center">描述</th><th align="center">位宽</th><th align="center">方向</th></tr></thead><tbody><tr><td align="center">imm16</td><td align="center">16位立即数</td><td align="center">16</td><td align="center">I</td></tr><tr><td align="center">ExtOp</td><td align="center">位扩展控制码</td><td align="center">2</td><td align="center">I</td></tr><tr><td align="center">Result</td><td align="center">位扩展结果</td><td align="center">32</td><td align="center">O</td></tr></tbody></table><h4 id="位扩展控制码"><a href="#位扩展控制码" class="headerlink" title="位扩展控制码"></a>位扩展控制码</h4><table><thead><tr><th align="center">ExtOp</th><th align="center">Function</th></tr></thead><tbody><tr><td align="center">00</td><td align="center">Zero</td></tr><tr><td align="center">01</td><td align="center">Sign</td></tr><tr><td align="center">10</td><td align="center">High</td></tr><tr><td align="center">11</td><td align="center">?</td></tr></tbody></table><h3 id="im-v"><a href="#im-v" class="headerlink" title="im.v"></a>im.v</h3><h4 id="端口定义-3"><a href="#端口定义-3" class="headerlink" title="端口定义"></a>端口定义</h4><table><thead><tr><th align="center">名称</th><th align="center">描述</th><th align="center">位宽</th><th align="center">方向</th></tr></thead><tbody><tr><td align="center">PC</td><td align="center">当前指令地址</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">instr</td><td align="center">取出的指令</td><td align="center">32</td><td align="center">O</td></tr></tbody></table><h3 id="dm-v"><a href="#dm-v" class="headerlink" title="dm.v"></a>dm.v</h3><h4 id="端口定义-4"><a href="#端口定义-4" class="headerlink" title="端口定义"></a>端口定义</h4><table><thead><tr><th align="center">名称</th><th align="center">描述</th><th align="center">位宽</th><th align="center">方向</th></tr></thead><tbody><tr><td align="center">clk</td><td align="center">时钟信号</td><td align="center">1</td><td align="center">I</td></tr><tr><td align="center">reset</td><td align="center">同步复位信号</td><td align="center">1</td><td align="center">I</td></tr><tr><td align="center">MemWrite</td><td align="center">数据存储器写使能</td><td align="center">1</td><td align="center">I</td></tr><tr><td align="center">PC</td><td align="center">当前指令地址</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">A</td><td align="center">读地址</td><td align="center">10</td><td align="center">I</td></tr><tr><td align="center">WD</td><td align="center">写数据</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">RD</td><td align="center">输出A指定地址的数据</td><td align="center">32</td><td align="center">O</td></tr></tbody></table><h3 id="npc-v"><a href="#npc-v" class="headerlink" title="npc.v"></a>npc.v</h3><h4 id="端口定义-5"><a href="#端口定义-5" class="headerlink" title="端口定义"></a>端口定义</h4><table><thead><tr><th align="center">名称</th><th align="center">描述</th><th align="center">位宽</th><th align="center">方向</th></tr></thead><tbody><tr><td align="center">PC</td><td align="center">当前指令地址</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">imm26</td><td align="center">26位立即数</td><td align="center">26</td><td align="center">I</td></tr><tr><td align="center">EXT</td><td align="center">位扩展器结果</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">ra</td><td align="center"><code>$ra</code>寄存器的值</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">nPC_sel</td><td align="center">跳转控制信号</td><td align="center">2</td><td align="center">I</td></tr><tr><td align="center">isZero</td><td align="center">零判断信号</td><td align="center">1</td><td align="center">I</td></tr><tr><td align="center">NPC</td><td align="center">下一条指令地址</td><td align="center">32</td><td align="center">O</td></tr></tbody></table><h4 id="跳转控制信号"><a href="#跳转控制信号" class="headerlink" title="跳转控制信号"></a>跳转控制信号</h4><table><thead><tr><th align="center">nPC_sel</th><th align="center">NPC</th></tr></thead><tbody><tr><td align="center">00</td><td align="center">PC + 4</td></tr><tr><td align="center">01</td><td align="center">(isZero == 1’b1) ? PC + 4 + (EXT &lt;&lt; 2) : PC + 4</td></tr><tr><td align="center">10</td><td align="center">{PC[31:28], imm26 &lt;&lt; 2}</td></tr><tr><td align="center">11</td><td align="center">GPR[rs]</td></tr></tbody></table><h3 id="mux-v"><a href="#mux-v" class="headerlink" title="mux.v"></a>mux.v</h3><h4 id="端口定义-6"><a href="#端口定义-6" class="headerlink" title="端口定义"></a>端口定义</h4><ul><li>mux_A3</li></ul><table><thead><tr><th align="center">名称</th><th align="center">描述</th><th align="center">位宽</th><th align="center">方向</th></tr></thead><tbody><tr><td align="center">RegDst</td><td align="center">寄存器写地址选择信号</td><td align="center">2</td><td align="center">I</td></tr><tr><td align="center">rt</td><td align="center">源操作数寄存器1</td><td align="center">5</td><td align="center">I</td></tr><tr><td align="center">rd</td><td align="center">源操作数寄存器2</td><td align="center">5</td><td align="center">I</td></tr><tr><td align="center">A3</td><td align="center">寄存器写地址</td><td align="center">5</td><td align="center">O</td></tr></tbody></table><ul><li>mux_ALUB</li></ul><table><thead><tr><th align="center">名称</th><th align="center">描述</th><th align="center">位宽</th><th align="center">方向</th></tr></thead><tbody><tr><td align="center">ALUSrc</td><td align="center">ALU操作数B选择信号</td><td align="center">1</td><td align="center">I</td></tr><tr><td align="center">RD2</td><td align="center">寄存器读数据2</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">imm</td><td align="center">经位扩展后的立即数</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">B</td><td align="center">ALU操作数B</td><td align="center">32</td><td align="center">O</td></tr></tbody></table><ul><li>mux_grf_WD</li></ul><table><thead><tr><th align="center">名称</th><th align="center">描述</th><th align="center">位宽</th><th align="center">方向</th></tr></thead><tbody><tr><td align="center">MemtoReg</td><td align="center">寄存器写数据选择信号</td><td align="center">2</td><td align="center">I</td></tr><tr><td align="center">C</td><td align="center">ALU运算结果</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">RD</td><td align="center">数据存储器读数据</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">PC4</td><td align="center">PC + 4</td><td align="center">32</td><td align="center">I</td></tr><tr><td align="center">WD</td><td align="center">GRF写数据</td><td align="center">32</td><td align="center">O</td></tr></tbody></table><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p><em>1.阅读下面给出的 DM 的输入示例中（示例 DM 容量为 4KB，即 32bit × 1024字），根据你的理解回答，这个 addr 信号又是从哪里来的？地址信号 addr 位数为什么是 [11:2] 而不是 [9:0] ？</em></p><img src="/2023/03/21/buaa-co-2022-p4/Picture1.png" class="" title="Picture1"><p>addr信号来源于指令。</p><p>在DM中，我们需要按字寻址，而MIPS架构中是按字节寻址的，所以应取addr[11:2]而不是[9:0]。</p><p><em>2.思考上述两种控制器设计的译码方式（记录下<strong>指令对应的控制信号如何取值</strong>或记录下<strong>控制信号每种取值所对应的指令</strong>），给出代码示例，并尝试对比各方式的优劣。</em></p><ul><li>记录下指令对应的控制信号如何取值</li></ul><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">case</span> <span class="token punctuation">(</span>op<span class="token punctuation">)</span>    lw <span class="token punctuation">:</span> <span class="token keyword">begin</span>        <span class="token keyword">assign</span> RegDst <span class="token operator">=</span> <span class="token number">2'b00</span><span class="token punctuation">;</span>        <span class="token keyword">assign</span> ALUSrc <span class="token operator">=</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>        <span class="token keyword">assign</span> MemtoReg <span class="token operator">=</span> <span class="token number">2'b01</span><span class="token punctuation">;</span>        <span class="token keyword">assign</span> RegWrite <span class="token operator">=</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>        <span class="token keyword">assign</span> MemWrite <span class="token operator">=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>        <span class="token comment">//......</span>    <span class="token keyword">end</span>        sw <span class="token punctuation">:</span> <span class="token keyword">begin</span>        <span class="token keyword">assign</span> RegDst <span class="token operator">=</span> <span class="token number">2'b00</span><span class="token punctuation">;</span>        <span class="token keyword">assign</span> ALUSrc <span class="token operator">=</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>        <span class="token keyword">assign</span> MemtoReg <span class="token operator">=</span> <span class="token number">2'b00</span><span class="token punctuation">;</span>        <span class="token keyword">assign</span> RegWrite <span class="token operator">=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>        <span class="token keyword">assign</span> MemWrite <span class="token operator">=</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>        <span class="token comment">//......</span>    <span class="token keyword">end</span><span class="token keyword">endcase</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方法可以清晰地看到每条指令所对应的各个控制信号的取值。但如果有新增的控制信号，需要在每条指令下都添加新增控制信号的取值情况，当指令数量较多时会很不方便。</p><ul><li>记录下控制信号每种取值所对应的指令</li></ul><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">assign</span> RegDst <span class="token operator">=</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> special <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>funct <span class="token operator">==</span> add <span class="token operator">||</span> funct <span class="token operator">==</span> sub<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">2'b01</span> <span class="token punctuation">:</span><span class="token punctuation">(</span>op <span class="token operator">==</span> jal<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">2'b10</span> <span class="token punctuation">:</span> <span class="token number">2'b00</span><span class="token punctuation">;</span><span class="token keyword">assign</span> ALUSrc <span class="token operator">=</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> ori <span class="token operator">||</span> op <span class="token operator">==</span> lw <span class="token operator">||</span> op <span class="token operator">==</span> sw <span class="token operator">||</span> op <span class="token operator">==</span> lui<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1'b1</span> <span class="token punctuation">:</span><span class="token number">1'b0</span><span class="token punctuation">;</span><span class="token keyword">assign</span> MemtoReg <span class="token operator">=</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> lw<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">2'b01</span> <span class="token punctuation">:</span>  <span class="token punctuation">(</span>op <span class="token operator">==</span> jal<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">2'b10</span> <span class="token punctuation">:</span>  <span class="token number">2'b00</span><span class="token punctuation">;</span><span class="token keyword">assign</span> RegWrite <span class="token operator">=</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> ori <span class="token operator">||</span> op <span class="token operator">==</span> lw <span class="token operator">||</span> op <span class="token operator">==</span> lui <span class="token operator">||</span> op <span class="token operator">==</span> jal<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1'b1</span> <span class="token punctuation">:</span>  <span class="token punctuation">(</span>op <span class="token operator">==</span> special <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>funct <span class="token operator">==</span> add <span class="token operator">||</span> funct <span class="token operator">==</span> sub<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1'b1</span> <span class="token punctuation">:</span>  <span class="token number">1'b0</span><span class="token punctuation">;</span><span class="token keyword">assign</span> MemWrite <span class="token operator">=</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> sw<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1'b1</span> <span class="token punctuation">:</span>  <span class="token number">1'b0</span><span class="token punctuation">;</span><span class="token keyword">assign</span> nPC_sel <span class="token operator">=</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> beq<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">2'b01</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> jal<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">2'b10</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> special <span class="token operator">&amp;&amp;</span> funct <span class="token operator">==</span> j<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">2'b11</span> <span class="token punctuation">:</span> <span class="token number">2'b00</span><span class="token punctuation">;</span><span class="token keyword">assign</span> ALUOp <span class="token operator">=</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> beq<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> special <span class="token operator">&amp;&amp;</span> funct <span class="token operator">==</span> sub<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">4'b0001</span> <span class="token punctuation">:</span>   <span class="token punctuation">(</span>op <span class="token operator">==</span> ori<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">4'b0010</span> <span class="token punctuation">:</span>   <span class="token number">4'b0000</span><span class="token punctuation">;</span><span class="token keyword">assign</span> ExtOp <span class="token operator">=</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> lw <span class="token operator">||</span> op <span class="token operator">==</span> sw <span class="token operator">||</span> op <span class="token operator">==</span> beq<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">2'b01</span> <span class="token punctuation">:</span>   <span class="token punctuation">(</span>op <span class="token operator">==</span> lui<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">2'b10</span> <span class="token punctuation">:</span>   <span class="token number">2'b00</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方法可以清晰地看到每条控制信号在不同取值时对应的指令都有哪些，且新增控制信号较为方便。但在查看某条指令对应的控制信号时并不直观。</p><p><em>3.在相应的部件中，复位信号的设计都是<strong>同步复位</strong>，这与 P3 中的设计要求不同。请对比<strong>同步复位</strong>与<strong>异步复位</strong>这两种方式的 reset 信号与 clk 信号优先级的关系。</em></p><p>同步复位：<strong>只有在clk上升沿</strong>才会判断reset信号是否有效，其余情况下无论reset是否有效，都不会进行复位；</p><p>异步复位：<strong>在任何时候</strong>只要reset有效，无论clk为何值，立即进行复位操作。</p><p><em>4.C 语言是一种弱类型程序设计语言。C 语言中不对计算结果溢出进行处理，这意味着 C  语言要求程序员必须很清楚计算结果是否会导致溢出。因此，如果仅仅支持 C 语言，MIPS 指令的所有计算指令均可以忽略溢出。  请说明为什么在忽略溢出的前提下，addi 与 addiu 是等价的，add 与 addu 是等价的。提示：阅读《MIPS32®  Architecture For Programmers Volume II: The MIPS32® Instruction  Set》中相关指令的 Operation 部分 。</em></p><p>指令集中显示，ADDU(ADDIU)是直接将运算结果存入rd(rt)对应的寄存器中，而ADD(ADDI)是先判断是否溢出，若溢出则抛出异常，否则将结果存入rd(rt)对应的寄存器中。</p><p>如果忽略溢出，那么ADDU(ADDIU)和ADD(ADDI)产生的结果均为将运算结果存入rd(rt)对应的寄存器中，所以是等价的。</p><h2 id="CPU-Logisim"><a href="#CPU-Logisim" class="headerlink" title="CPU_Logisim"></a>CPU_Logisim</h2><img src="/2023/03/21/buaa-co-2022-p4/CPU_P1.png" class="" title="CPU_P1"><img src="/2023/03/21/buaa-co-2022-p4/CPU_P2.png" class="" title="CPU_P2">]]></content>
      
      
      <categories>
          
          <category> CO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUAA_CO_2022_P3</title>
      <link href="/2023/03/21/buaa-co-2022-p3/"/>
      <url>/2023/03/21/buaa-co-2022-p3/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="CPU-设计文档"><a href="#CPU-设计文档" class="headerlink" title="CPU 设计文档"></a>CPU 设计文档</h1><hr><h2 id="CPU模块设计"><a href="#CPU模块设计" class="headerlink" title="CPU模块设计"></a>CPU模块设计</h2><h3 id="NPC"><a href="#NPC" class="headerlink" title="NPC"></a>NPC</h3><h4 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h4><h5 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h5><ul><li><code>PC[31:0]</code></li><li><code>imm26[25:0]</code></li><li><code>EXT_IMM16[31:0]</code></li><li><code>GPR[rs][31:0]</code></li><li><code>nPC_sel[1:0]</code></li><li><code>isZero</code></li></ul><h5 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h5><ul><li><code>NPC[31:0]</code></li></ul><h3 id="IM-指令存储器"><a href="#IM-指令存储器" class="headerlink" title="IM(指令存储器)"></a>IM(指令存储器)</h3><h4 id="输入与输出-1"><a href="#输入与输出-1" class="headerlink" title="输入与输出"></a>输入与输出</h4><h5 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h5><ul><li><code>PC[31:0]</code></li></ul><h5 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h5><ul><li>指令<code>Instruction[31:0]</code></li></ul><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ul><li>这里使用到的存储器是ROM存储器，ROM是只读存储器，具有非易失性</li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li><p>实际地址宽度为5位，所以ROM的Address Bit Width应设置为5  </p></li><li><p>向ROM中读指令时，文件头应为：</p></li></ul><pre class="line-numbers language-none"><code class="language-none">v2.0 raw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="DM-数据存储器"><a href="#DM-数据存储器" class="headerlink" title="DM(数据存储器)"></a>DM(数据存储器)</h3><h4 id="输入与输出-2"><a href="#输入与输出-2" class="headerlink" title="输入与输出"></a>输入与输出</h4><h5 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h5><ul><li>写地址<code>Addr[31:0]</code></li><li>写入数据<code>WD[31:0]</code></li><li>写使能信号<code>MemWrite</code></li><li><code>MemtoReg</code></li><li>异步复位信号<code>reset</code></li></ul><h5 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h5><ul><li>数据输出<code>RD[31:0]</code></li></ul><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><ul><li>这里使用的存储器是RAM</li></ul><h3 id="ALU-算术逻辑单元"><a href="#ALU-算术逻辑单元" class="headerlink" title="ALU(算术逻辑单元)"></a>ALU(算术逻辑单元)</h3><h4 id="输入与输出-3"><a href="#输入与输出-3" class="headerlink" title="输入与输出"></a>输入与输出</h4><h5 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h5><ul><li>运算数<code>A[31:0]</code></li><li>运算数<code>B[31:0]</code></li><li>ALU控制码<code>ALUop[3:0]</code></li></ul><h5 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h5><ul><li>运算结果<code>Result[31:0]</code></li><li>零判断<code>isZero</code></li></ul><h4 id="ALU控制码"><a href="#ALU控制码" class="headerlink" title="ALU控制码"></a>ALU控制码</h4><p>根据ALU控制码<code>ALUop</code>来确定进行何种运算：  </p><table><thead><tr><th align="center">ALUop</th><th align="center">Function</th></tr></thead><tbody><tr><td align="center">0000</td><td align="center">ADD</td></tr><tr><td align="center">0001</td><td align="center">SUB</td></tr><tr><td align="center">0010</td><td align="center">OR</td></tr><tr><td align="center">0011</td><td align="center">AND</td></tr><tr><td align="center">0100</td><td align="center">XOR</td></tr></tbody></table><h4 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h4><ul><li><p>这里<code>ALUop</code>用了4位，以便于后续添加各种类型的运算</p></li><li><p>添加零判断输出<code>isZero</code>可以在<code>beq</code>等指令中快速判断结果</p></li></ul><h3 id="Controller-控制器"><a href="#Controller-控制器" class="headerlink" title="Controller(控制器)"></a>Controller(控制器)</h3><h4 id="输入与输出-4"><a href="#输入与输出-4" class="headerlink" title="输入与输出"></a>输入与输出</h4><h5 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h5><ul><li><code>opcode[5:0]</code>  </li><li><code>funct[5:0]</code></li></ul><h5 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h5><ul><li><code>RegDst</code></li><li><code>ALUSrc</code></li><li><code>MemtoReg</code></li><li><code>RegWrite</code></li><li><code>nPC_sel[1:0]</code></li><li><code>ALUctr</code></li></ul><h4 id="“与”逻辑部分"><a href="#“与”逻辑部分" class="headerlink" title="“与”逻辑部分"></a>“与”逻辑部分</h4><p>根据 <code>opcode</code> 与 <code>funct</code> 将输入的机器码识别为相应的指令：  </p><table><thead><tr><th align="center">Instruction</th><th align="center">opcode</th><th align="center">funct</th></tr></thead><tbody><tr><td align="center">add</td><td align="center">000000</td><td align="center">100000</td></tr><tr><td align="center">sub</td><td align="center">000000</td><td align="center">100010</td></tr><tr><td align="center">ori</td><td align="center">001101</td><td align="center">n/a</td></tr><tr><td align="center">lw</td><td align="center">100011</td><td align="center">n/a</td></tr><tr><td align="center">sw</td><td align="center">101011</td><td align="center">n/a</td></tr><tr><td align="center">beq</td><td align="center">000100</td><td align="center">n/a</td></tr><tr><td align="center">lui</td><td align="center">001111</td><td align="center">n/a</td></tr></tbody></table><h4 id="“或”逻辑部分"><a href="#“或”逻辑部分" class="headerlink" title="“或”逻辑部分"></a>“或”逻辑部分</h4><p>根据指令生成相应的控制信号：  </p><table><thead><tr><th align="center"></th><th align="center">add</th><th align="center">sub</th><th align="center">xor</th><th align="center">ori</th><th align="center">lw</th><th align="center">sw</th><th align="center">beq</th><th align="center">lui</th><th align="center">j</th><th align="center">jal</th><th align="center">jr</th></tr></thead><tbody><tr><td align="center"><strong>RegDst</strong></td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">X</td><td align="center">X</td><td align="center">0</td><td align="center">X</td><td align="center">X</td><td align="center">X</td></tr><tr><td align="center"><strong>ALUSrc</strong></td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">0</td><td align="center">1</td><td align="center">X</td><td align="center">X</td><td align="center">X</td></tr><tr><td align="center"><strong>MemtoReg</strong></td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">X</td><td align="center">X</td><td align="center">0</td><td align="center">X</td><td align="center">X</td><td align="center">X</td></tr><tr><td align="center"><strong>RegWrite</strong></td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center"><strong>MemWrite</strong></td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center"><strong>nPC_sel</strong></td><td align="center">00</td><td align="center">00</td><td align="center">00</td><td align="center">00</td><td align="center">00</td><td align="center">00</td><td align="center">01</td><td align="center">00</td><td align="center">10</td><td align="center">10</td><td align="center">11</td></tr><tr><td align="center"><strong>ALUctr</strong></td><td align="center">ADD</td><td align="center">SUB</td><td align="center">XOR</td><td align="center">OR</td><td align="center">ADD</td><td align="center">ADD</td><td align="center">SUB</td><td align="center">ADD</td><td align="center">X</td><td align="center">X</td><td align="center">X</td></tr><tr><td align="center"><strong>ExtOp</strong></td><td align="center">None</td><td align="center">None</td><td align="center">None</td><td align="center">Zero</td><td align="center">Sign</td><td align="center">Sign</td><td align="center">Sign</td><td align="center">High</td><td align="center">None</td><td align="center">None</td><td align="center">None</td></tr></tbody></table><h4 id="各控制信号功能"><a href="#各控制信号功能" class="headerlink" title="各控制信号功能"></a>各控制信号功能</h4><ul><li><p>RegDst：由于R型指令和I型指令所要写入的寄存器对应指令中的位数不同，需要该信号来控制写入哪个寄存器。R型指令置1（写入rd），I型指令置0（写入rt）。  </p></li><li><p>ALUSrc：选择ALU的操作数B是从寄存器中读取的还是立即数，R型指令（从寄存器中读取数）置0，I型指令（立即数）置1。  </p></li><li><p>MemtoReg：选择写入寄存器堆的值的选择信号</p><ul><li>00：运算器运算结果</li><li>01：还是存储器中取出的数</li><li>10：PC + 4</li></ul></li><li><p>RegWrite：寄存器(GRF)写使能。  </p></li><li><p>MemWrite：数据存储器(DM)写使能。  </p></li><li><p>nPC_sel：跳转信号，beq指令置01，j、jal指令置10，jr指令置11。    </p></li><li><p>ALUctr：选择需要何种运算操作（见ALU部分）。  </p></li><li><p>ExtOp：选择需要何种位扩展操作（见Ext部分）。</p></li></ul><h3 id="Ex-位扩展器"><a href="#Ex-位扩展器" class="headerlink" title="Ex(位扩展器)"></a>Ex(位扩展器)</h3><h4 id="输入与输出-5"><a href="#输入与输出-5" class="headerlink" title="输入与输出"></a>输入与输出</h4><h5 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h5><ul><li>16位立即数<code>Imm[15:0]</code>  </li><li>位扩展方式<code>ExtOp[1:0]</code></li></ul><h5 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h5><ul><li>位扩展结果<code>Ext[31:0]</code></li></ul><h4 id="位扩展方式"><a href="#位扩展方式" class="headerlink" title="位扩展方式"></a>位扩展方式</h4><table><thead><tr><th align="center">ExtOp</th><th align="center">Function</th></tr></thead><tbody><tr><td align="center">00</td><td align="center">Zero</td></tr><tr><td align="center">01</td><td align="center">Sign</td></tr><tr><td align="center">10</td><td align="center">High</td></tr><tr><td align="center">11</td><td align="center">?</td></tr></tbody></table><h4 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h4><ul><li>这里ExtOp用两位表示，并留出一种了情况留待扩展</li></ul><h3 id="GRF-通用寄存器组"><a href="#GRF-通用寄存器组" class="headerlink" title="GRF(通用寄存器组)"></a>GRF(通用寄存器组)</h3><h4 id="输入与输出-6"><a href="#输入与输出-6" class="headerlink" title="输入与输出"></a>输入与输出</h4><h5 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h5><ul><li>读地址1<code>A1[4:0]</code>  </li><li>读地址2<code>A2[4:0]</code>  </li><li>写地址<code>A3[4:0]</code>  </li><li>数据输入<code>WD[31:0]</code></li><li>异步复位信号<code>reset</code></li><li>写使能信号<code>we</code></li></ul><h5 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h5><ul><li>输出A1指定的寄存器数据<code>RD1[31:0]</code>  </li><li>输出A2指定的寄存器数据<code>RD2[31:0]</code></li></ul><h4 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h4><ul><li><p>零寄存器的值始终为0  </p></li><li><p>这里直接使用了在 <em>P0_L0_GRF</em> 中搭建的电路</p></li></ul><h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>将RAM的”Data Interface”设为”Seperate load and store ports”</li></ul><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p><strong>上面我们介绍了通过 FSM 理解单周期 CPU 的基本方法。请大家指出单周期 CPU 所用到的模块中，哪些发挥状态存储功能，哪些发挥状态转移功能。</strong></p><p>答：状态存储功能： PC 、 GRF ；状态转移功能： NPC 、 DM 。</p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p><strong>现在我们的模块中 IM 使用 ROM， DM 使用 RAM， GRF 使用 Register，这种做法合理吗？ 请给出分析，若有改进意见也请一并给出。</strong></p><p>答：ROM是只读存储器，速度慢于RAM，但它的内容一经写入不易被更改，具有非易失性，使用于IM中可以很好地保存指令；RAM是随机存取存储器，它的速度很快，可以随时对DM中相应的地址进行读或写，用于DM中方便又快捷；Register的使用效率更高，高于RAM，将它用于GRF可以更加快捷地对32个寄存器进行读或写。</p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p><strong>事实上，实现 <code>nop</code> 空指令，我们并不需要将它加入控制信号真值表，为什么？</strong></p><p>答：对于 <code>nop</code> 空指令，其对应的控制型号RegWrite、MemWrite、nPC_sel均为0，且不关心RegDst、ALUSrc、MemtoReg、ALUctr、ExtOp这些控制信号，所以无需加入控制信号真值表。</p><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p><strong>上文提到，MARS 不能导出 PC 与 DM 起始地址均为 0 的机器码。实际上，可以避免手工修改的麻烦。请查阅相关资料进行了解，并阐释为了解决这个问题，你最终采用的方法。</strong></p><p>在 MARS 中，默认 PC 的地址从 0x00003000 开始，所以可以在 Logisim 中的 IM 模块中判断输入是否大于 0x00003000 ，若大于，则减去 0x00003000 。</p><img src="/2023/03/21/buaa-co-2022-p3/Q4.png" class="" title="Q4"><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><p><strong>阅读 Pre 的 <a href="https://cscore.e1.buaa.edu.cn/tutorial/mips/mips-6/mips6-1/">“MIPS 指令集及汇编语言”</a> 一节中给出的测试样例，评价其强度（可从各个指令的覆盖情况，单一指令各种行为的覆盖情况等方面分析），并指出具体的不足之处。</strong></p><p>答：从不同指令来分析：</p><h4 id="ori指令"><a href="#ori指令" class="headerlink" title="ori指令"></a>ori指令</h4><pre class="line-numbers language-none"><code class="language-none">ori $a0, $0, 123ori $a1, $a0, 456# ori $a2, $0, -456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>包含了非零数与 0 进行或运算，非零数之间进行或运算的情况，覆盖情况很好。<del>（应该没有必要测试 0 与 0 进行或运算的情况）</del></p><h4 id="lui指令"><a href="#lui指令" class="headerlink" title="lui指令"></a>lui指令</h4><pre class="line-numbers language-none"><code class="language-none">lui $a2, 123            # 符号位为 0lui $a3, 0xffff         # 符号位为 1ori $a3, $a3, 0xffff    # $a3 = -1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>未包含高位非 0 的情况。</p><h4 id="add-指令"><a href="#add-指令" class="headerlink" title="add 指令"></a>add 指令</h4><pre class="line-numbers language-none"><code class="language-none">add $s0, $a0, $a2      # 正正add $s1, $a0, $a3      # 正负add $s2, $a3, $a3      # 负负<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>包含了正数加正数，正数加负数，负数加负数三种情况。可以在此基础上测试一下数据范围边界的一些数之间的 add 。</p><h4 id="sub指令"><a href="#sub指令" class="headerlink" title="sub指令"></a>sub指令</h4><p>给出的测试样例未对 sub 指令进行测试。</p><h4 id="sw指令"><a href="#sw指令" class="headerlink" title="sw指令"></a>sw指令</h4><pre class="line-numbers language-none"><code class="language-none">ori $t0, $0, 0x0000sw $a0, 0($t0)sw $a1, 4($t0)sw $a2, 8($t0)sw $a3, 12($t0)sw $s0, 16($t0)sw $s1, 20($t0)sw $s2, 24($t0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="lw指令"><a href="#lw指令" class="headerlink" title="lw指令"></a>lw指令</h4><pre class="line-numbers language-none"><code class="language-none">lw $a0, 0($t0)lw $a1, 12($t0)sw $a0, 28($t0)sw $a1, 32($t0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>应该测试一下向 $0 写入数据的情况。</p><h4 id="beq指令"><a href="#beq指令" class="headerlink" title="beq指令"></a>beq指令</h4><pre class="line-numbers language-none"><code class="language-none">ori $a0, $0, 1ori $a1, $0, 2ori $a2, $0, 1beq $a0, $a1, loop1     # 不相等beq $a0, $a2, loop2     # 相等loop1:sw $a0, 36($t0)loop2:sw $a1, 40($t0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试方案"><a href="#测试方案" class="headerlink" title="测试方案"></a>测试方案</h2><h3 id="ori指令-1"><a href="#ori指令-1" class="headerlink" title="ori指令"></a>ori指令</h3><pre class="line-numbers language-none"><code class="language-none">ori $a0, 123ori $a1, 456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="lui指令-1"><a href="#lui指令-1" class="headerlink" title="lui指令"></a>lui指令</h3><pre class="line-numbers language-none"><code class="language-none">lui $a2, 234lui $a2, 123            # 符号位为 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="add指令"><a href="#add指令" class="headerlink" title="add指令"></a>add指令</h3><pre class="line-numbers language-none"><code class="language-none">add $t0, $a0, $a1       # 测试正数+正数lui $a3, 0xffff         # 符号位为 1ori $a3, $a3, 0xffff    # $a3 = -1(先构造一个负数)add $t1, $a0, $a3       # 测试正数+负数add $t2, $a3, $a3       # 测试负数+负数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="sub指令-1"><a href="#sub指令-1" class="headerlink" title="sub指令"></a>sub指令</h3><pre class="line-numbers language-none"><code class="language-none">sub $t0, $a0, $a1       # 测试正数-正数(结果为负数)sub $t1, $a3, $a0       # 测试负数-正数sub $t2, $a3, $t0       # 测试负数-负数sub $t3, $a3, $a1       # 测试负数-正数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="xor指令"><a href="#xor指令" class="headerlink" title="xor指令"></a>xor指令</h3><pre class="line-numbers language-none"><code class="language-none">xor $t4, $a0, $a1xor $t5, $a0, $a2   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="sw指令-1"><a href="#sw指令-1" class="headerlink" title="sw指令"></a>sw指令</h3><pre class="line-numbers language-none"><code class="language-none">ori $t0, $0, 0x0000sw $a0, 0($t0)sw $a1, 4($t0)sw $a2, 8($t0)sw $a3, 12($t0)sw $t1, 20($t0)sw $t2, 28($t0)sw $t3, 32($t0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="lw指令-1"><a href="#lw指令-1" class="headerlink" title="lw指令"></a>lw指令</h3><pre class="line-numbers language-none"><code class="language-none">lw $0, 0($t0)lw $a1, 0($t0)lw $a0, 8($t0)lw $a0, 12($t0)sw $a0, 24($t0)sw $a1, 28($t0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="beq指令-1"><a href="#beq指令-1" class="headerlink" title="beq指令"></a>beq指令</h3><pre class="line-numbers language-none"><code class="language-none">ori $a0, $0, 1ori $a1, $0, 2ori $a2, $0, 1beq $a0, $a1, beq1beq $a0, $a2, beq2beq1:sw $a1, 36($t0)beq2:sw $a1, 40($t0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="完整测试样例"><a href="#完整测试样例" class="headerlink" title="完整测试样例"></a>完整测试样例</h3><pre class="line-numbers language-none"><code class="language-none">ori $a0, 123ori $a1, 456add $t0, $a0, $a1      lui $a3, 0xffff         ori $a3, $a3, 0xffff   add $t1, $a0, $a3      add $t2, $a3, $a3       sub $t0, $a0, $a1       sub $t1, $a3, $a0      sub $t2, $a3, $t0       sub $t3, $a3, $a1  xor $t4, $a0, $a1xor $t5, $a0, $a2     ori $t0, $0, 0x0000sw $a0, 0($t0)sw $a1, 4($t0)sw $a2, 8($t0)sw $a3, 12($t0)sw $t1, 20($t0)sw $t2, 28($t0)sw $t3, 32($t0)lw $0, 0($t0)lw $a1, 0($t0)lw $a0, 8($t0)lw $a0, 12($t0)sw $a0, 24($t0)sw $a1, 28($t0)ori $a0, $0, 1ori $a1, $0, 2ori $a2, $0, 1beq $a0, $a1, beq1beq $a0, $a2, beq2beq1:sw $a1, 36($t0)beq2:sw $a1, 40($t0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test1</title>
      <link href="/2023/03/21/test1/"/>
      <url>/2023/03/21/test1/</url>
      
        <content type="html"><![CDATA[<p>$ma^3b^rc^u$</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/03/21/hello-world/"/>
      <url>/2023/03/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
